import {NodeType} from '@lezer/common';
import {Groovy} from '@rainbow-n19/n2';
import {SymbolToken} from './tokens';

const GroovyParser = Groovy.GroovyParser;
export const TokenToNodeType: { [key in SymbolToken | 'compilationUnit']: NodeType } = {
	compilationUnit: NodeType.define({id: GroovyParser.RULE_compilationUnit, name: 'compilationUnit', top: true}),
	StringLiteral: NodeType.define({id: GroovyParser.StringLiteral, name: 'StringLiteral'}),
	GStringBegin: NodeType.define({id: GroovyParser.GStringBegin, name: 'GStringBegin'}),
	GStringEnd: NodeType.define({id: GroovyParser.GStringEnd, name: 'GStringEnd'}),
	GStringPart: NodeType.define({id: GroovyParser.GStringPart, name: 'GStringPart'}),
	GStringPathPart: NodeType.define({id: GroovyParser.GStringPathPart, name: 'GStringPathPart'}),
	RollBackOne: NodeType.define({id: GroovyParser.RollBackOne, name: 'RollBackOne'}),
	AS: NodeType.define({id: GroovyParser.AS, name: 'AS'}),
	DEF: NodeType.define({id: GroovyParser.DEF, name: 'DEF'}),
	IN: NodeType.define({id: GroovyParser.IN, name: 'IN'}),
	TRAIT: NodeType.define({id: GroovyParser.TRAIT, name: 'TRAIT'}),
	THREADSAFE: NodeType.define({id: GroovyParser.THREADSAFE, name: 'THREADSAFE'}),
	VAR: NodeType.define({id: GroovyParser.VAR, name: 'VAR'}),
	BuiltInPrimitiveType: NodeType.define({id: GroovyParser.BuiltInPrimitiveType, name: 'BuiltInPrimitiveType'}),
	ABSTRACT: NodeType.define({id: GroovyParser.ABSTRACT, name: 'ABSTRACT'}),
	ASSERT: NodeType.define({id: GroovyParser.ASSERT, name: 'ASSERT'}),
	BREAK: NodeType.define({id: GroovyParser.BREAK, name: 'BREAK'}),
	YIELD: NodeType.define({id: GroovyParser.YIELD, name: 'YIELD'}),
	CASE: NodeType.define({id: GroovyParser.CASE, name: 'CASE'}),
	CATCH: NodeType.define({id: GroovyParser.CATCH, name: 'CATCH'}),
	CLASS: NodeType.define({id: GroovyParser.CLASS, name: 'CLASS'}),
	CONST: NodeType.define({id: GroovyParser.CONST, name: 'CONST'}),
	CONTINUE: NodeType.define({id: GroovyParser.CONTINUE, name: 'CONTINUE'}),
	DEFAULT: NodeType.define({id: GroovyParser.DEFAULT, name: 'DEFAULT'}),
	DO: NodeType.define({id: GroovyParser.DO, name: 'DO'}),
	ELSE: NodeType.define({id: GroovyParser.ELSE, name: 'ELSE'}),
	ENUM: NodeType.define({id: GroovyParser.ENUM, name: 'ENUM'}),
	EXTENDS: NodeType.define({id: GroovyParser.EXTENDS, name: 'EXTENDS'}),
	FINAL: NodeType.define({id: GroovyParser.FINAL, name: 'FINAL'}),
	FINALLY: NodeType.define({id: GroovyParser.FINALLY, name: 'FINALLY'}),
	FOR: NodeType.define({id: GroovyParser.FOR, name: 'FOR'}),
	IF: NodeType.define({id: GroovyParser.IF, name: 'IF'}),
	GOTO: NodeType.define({id: GroovyParser.GOTO, name: 'GOTO'}),
	IMPLEMENTS: NodeType.define({id: GroovyParser.IMPLEMENTS, name: 'IMPLEMENTS'}),
	IMPORT: NodeType.define({id: GroovyParser.IMPORT, name: 'IMPORT'}),
	INSTANCEOF: NodeType.define({id: GroovyParser.INSTANCEOF, name: 'INSTANCEOF'}),
	INTERFACE: NodeType.define({id: GroovyParser.INTERFACE, name: 'INTERFACE'}),
	NATIVE: NodeType.define({id: GroovyParser.NATIVE, name: 'NATIVE'}),
	NEW: NodeType.define({id: GroovyParser.NEW, name: 'NEW'}),
	NON_SEALED: NodeType.define({id: GroovyParser.NON_SEALED, name: 'NON_SEALED'}),
	PACKAGE: NodeType.define({id: GroovyParser.PACKAGE, name: 'PACKAGE'}),
	PERMITS: NodeType.define({id: GroovyParser.PERMITS, name: 'PERMITS'}),
	PRIVATE: NodeType.define({id: GroovyParser.PRIVATE, name: 'PRIVATE'}),
	PROTECTED: NodeType.define({id: GroovyParser.PROTECTED, name: 'PROTECTED'}),
	PUBLIC: NodeType.define({id: GroovyParser.PUBLIC, name: 'PUBLIC'}),
	RECORD: NodeType.define({id: GroovyParser.RECORD, name: 'RECORD'}),
	RETURN: NodeType.define({id: GroovyParser.RETURN, name: 'RETURN'}),
	SEALED: NodeType.define({id: GroovyParser.SEALED, name: 'SEALED'}),
	STATIC: NodeType.define({id: GroovyParser.STATIC, name: 'STATIC'}),
	STRICTFP: NodeType.define({id: GroovyParser.STRICTFP, name: 'STRICTFP'}),
	SUPER: NodeType.define({id: GroovyParser.SUPER, name: 'SUPER'}),
	SWITCH: NodeType.define({id: GroovyParser.SWITCH, name: 'SWITCH'}),
	SYNCHRONIZED: NodeType.define({id: GroovyParser.SYNCHRONIZED, name: 'SYNCHRONIZED'}),
	THIS: NodeType.define({id: GroovyParser.THIS, name: 'THIS'}),
	THROW: NodeType.define({id: GroovyParser.THROW, name: 'THROW'}),
	THROWS: NodeType.define({id: GroovyParser.THROWS, name: 'THROWS'}),
	TRANSIENT: NodeType.define({id: GroovyParser.TRANSIENT, name: 'TRANSIENT'}),
	TRY: NodeType.define({id: GroovyParser.TRY, name: 'TRY'}),
	VOID: NodeType.define({id: GroovyParser.VOID, name: 'VOID'}),
	VOLATILE: NodeType.define({id: GroovyParser.VOLATILE, name: 'VOLATILE'}),
	WHILE: NodeType.define({id: GroovyParser.WHILE, name: 'WHILE'}),
	IntegerLiteral: NodeType.define({id: GroovyParser.IntegerLiteral, name: 'IntegerLiteral'}),
	FloatingPointLiteral: NodeType.define({id: GroovyParser.FloatingPointLiteral, name: 'FloatingPointLiteral'}),
	BooleanLiteral: NodeType.define({id: GroovyParser.BooleanLiteral, name: 'BooleanLiteral'}),
	NullLiteral: NodeType.define({id: GroovyParser.NullLiteral, name: 'NullLiteral'}),
	RANGE_INCLUSIVE: NodeType.define({id: GroovyParser.RANGE_INCLUSIVE, name: 'RANGE_INCLUSIVE'}),
	RANGE_EXCLUSIVE_LEFT: NodeType.define({id: GroovyParser.RANGE_EXCLUSIVE_LEFT, name: 'RANGE_EXCLUSIVE_LEFT'}),
	RANGE_EXCLUSIVE_RIGHT: NodeType.define({id: GroovyParser.RANGE_EXCLUSIVE_RIGHT, name: 'RANGE_EXCLUSIVE_RIGHT'}),
	RANGE_EXCLUSIVE_FULL: NodeType.define({id: GroovyParser.RANGE_EXCLUSIVE_FULL, name: 'RANGE_EXCLUSIVE_FULL'}),
	SPREAD_DOT: NodeType.define({id: GroovyParser.SPREAD_DOT, name: 'SPREAD_DOT'}),
	SAFE_DOT: NodeType.define({id: GroovyParser.SAFE_DOT, name: 'SAFE_DOT'}),
	SAFE_INDEX: NodeType.define({id: GroovyParser.SAFE_INDEX, name: 'SAFE_INDEX'}),
	SAFE_CHAIN_DOT: NodeType.define({id: GroovyParser.SAFE_CHAIN_DOT, name: 'SAFE_CHAIN_DOT'}),
	ELVIS: NodeType.define({id: GroovyParser.ELVIS, name: 'ELVIS'}),
	METHOD_POINTER: NodeType.define({id: GroovyParser.METHOD_POINTER, name: 'METHOD_POINTER'}),
	METHOD_REFERENCE: NodeType.define({id: GroovyParser.METHOD_REFERENCE, name: 'METHOD_REFERENCE'}),
	REGEX_FIND: NodeType.define({id: GroovyParser.REGEX_FIND, name: 'REGEX_FIND'}),
	REGEX_MATCH: NodeType.define({id: GroovyParser.REGEX_MATCH, name: 'REGEX_MATCH'}),
	POWER: NodeType.define({id: GroovyParser.POWER, name: 'POWER'}),
	POWER_ASSIGN: NodeType.define({id: GroovyParser.POWER_ASSIGN, name: 'POWER_ASSIGN'}),
	SPACESHIP: NodeType.define({id: GroovyParser.SPACESHIP, name: 'SPACESHIP'}),
	IDENTICAL: NodeType.define({id: GroovyParser.IDENTICAL, name: 'IDENTICAL'}),
	NOT_IDENTICAL: NodeType.define({id: GroovyParser.NOT_IDENTICAL, name: 'NOT_IDENTICAL'}),
	ARROW: NodeType.define({id: GroovyParser.ARROW, name: 'ARROW'}),
	NOT_INSTANCEOF: NodeType.define({id: GroovyParser.NOT_INSTANCEOF, name: 'NOT_INSTANCEOF'}),
	NOT_IN: NodeType.define({id: GroovyParser.NOT_IN, name: 'NOT_IN'}),
	LPAREN: NodeType.define({id: GroovyParser.LPAREN, name: 'LPAREN'}),
	RPAREN: NodeType.define({id: GroovyParser.RPAREN, name: 'RPAREN'}),
	LBRACE: NodeType.define({id: GroovyParser.LBRACE, name: 'LBRACE'}),
	RBRACE: NodeType.define({id: GroovyParser.RBRACE, name: 'RBRACE'}),
	LBRACK: NodeType.define({id: GroovyParser.LBRACK, name: 'LBRACK'}),
	RBRACK: NodeType.define({id: GroovyParser.RBRACK, name: 'RBRACK'}),
	SEMI: NodeType.define({id: GroovyParser.SEMI, name: 'SEMI'}),
	COMMA: NodeType.define({id: GroovyParser.COMMA, name: 'COMMA'}),
	DOT: NodeType.define({id: GroovyParser.DOT, name: 'DOT'}),
	ASSIGN: NodeType.define({id: GroovyParser.ASSIGN, name: 'ASSIGN'}),
	GT: NodeType.define({id: GroovyParser.GT, name: 'GT'}),
	LT: NodeType.define({id: GroovyParser.LT, name: 'LT'}),
	NOT: NodeType.define({id: GroovyParser.NOT, name: 'NOT'}),
	BITNOT: NodeType.define({id: GroovyParser.BITNOT, name: 'BITNOT'}),
	QUESTION: NodeType.define({id: GroovyParser.QUESTION, name: 'QUESTION'}),
	COLON: NodeType.define({id: GroovyParser.COLON, name: 'COLON'}),
	EQUAL: NodeType.define({id: GroovyParser.EQUAL, name: 'EQUAL'}),
	LE: NodeType.define({id: GroovyParser.LE, name: 'LE'}),
	GE: NodeType.define({id: GroovyParser.GE, name: 'GE'}),
	NOTEQUAL: NodeType.define({id: GroovyParser.NOTEQUAL, name: 'NOTEQUAL'}),
	AND: NodeType.define({id: GroovyParser.AND, name: 'AND'}),
	OR: NodeType.define({id: GroovyParser.OR, name: 'OR'}),
	INC: NodeType.define({id: GroovyParser.INC, name: 'INC'}),
	DEC: NodeType.define({id: GroovyParser.DEC, name: 'DEC'}),
	ADD: NodeType.define({id: GroovyParser.ADD, name: 'ADD'}),
	SUB: NodeType.define({id: GroovyParser.SUB, name: 'SUB'}),
	MUL: NodeType.define({id: GroovyParser.MUL, name: 'MUL'}),
	DIV: NodeType.define({id: GroovyParser.DIV, name: 'DIV'}),
	BITAND: NodeType.define({id: GroovyParser.BITAND, name: 'BITAND'}),
	BITOR: NodeType.define({id: GroovyParser.BITOR, name: 'BITOR'}),
	XOR: NodeType.define({id: GroovyParser.XOR, name: 'XOR'}),
	MOD: NodeType.define({id: GroovyParser.MOD, name: 'MOD'}),
	ADD_ASSIGN: NodeType.define({id: GroovyParser.ADD_ASSIGN, name: 'ADD_ASSIGN'}),
	SUB_ASSIGN: NodeType.define({id: GroovyParser.SUB_ASSIGN, name: 'SUB_ASSIGN'}),
	MUL_ASSIGN: NodeType.define({id: GroovyParser.MUL_ASSIGN, name: 'MUL_ASSIGN'}),
	DIV_ASSIGN: NodeType.define({id: GroovyParser.DIV_ASSIGN, name: 'DIV_ASSIGN'}),
	AND_ASSIGN: NodeType.define({id: GroovyParser.AND_ASSIGN, name: 'AND_ASSIGN'}),
	OR_ASSIGN: NodeType.define({id: GroovyParser.OR_ASSIGN, name: 'OR_ASSIGN'}),
	XOR_ASSIGN: NodeType.define({id: GroovyParser.XOR_ASSIGN, name: 'XOR_ASSIGN'}),
	MOD_ASSIGN: NodeType.define({id: GroovyParser.MOD_ASSIGN, name: 'MOD_ASSIGN'}),
	LSHIFT_ASSIGN: NodeType.define({id: GroovyParser.LSHIFT_ASSIGN, name: 'LSHIFT_ASSIGN'}),
	RSHIFT_ASSIGN: NodeType.define({id: GroovyParser.RSHIFT_ASSIGN, name: 'RSHIFT_ASSIGN'}),
	URSHIFT_ASSIGN: NodeType.define({id: GroovyParser.URSHIFT_ASSIGN, name: 'URSHIFT_ASSIGN'}),
	ELVIS_ASSIGN: NodeType.define({id: GroovyParser.ELVIS_ASSIGN, name: 'ELVIS_ASSIGN'}),
	CapitalizedIdentifier: NodeType.define({id: GroovyParser.CapitalizedIdentifier, name: 'CapitalizedIdentifier'}),
	Identifier: NodeType.define({id: GroovyParser.Identifier, name: 'Identifier'}),
	AT: NodeType.define({id: GroovyParser.AT, name: 'AT'}),
	ELLIPSIS: NodeType.define({id: GroovyParser.ELLIPSIS, name: 'ELLIPSIS'}),
	WS: NodeType.define({id: GroovyParser.WS, name: 'WS'}),
	NL: NodeType.define({id: GroovyParser.NL, name: 'NL'}),
	SH_COMMENT: NodeType.define({id: GroovyParser.SH_COMMENT, name: 'SH_COMMENT'}),
	UNEXPECTED_CHAR: NodeType.define({id: GroovyParser.UNEXPECTED_CHAR, name: 'UNEXPECTED_CHAR'})
};
