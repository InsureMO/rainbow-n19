import {AstNode} from './ast-node';
import {
	AddAssignNode,
	AddNode,
	AndAssignNode,
	AndNode,
	AnnotationDeclarationNode,
	ArrowNode,
	AssertNode,
	AssignNode,
	AsteriskNode,
	AtInterfaceDeclarationNode,
	BinaryLiteralNode,
	BinaryStartMarkNode,
	BitandNode,
	BitnotNode,
	BitorNode,
	BooleanLiteralNode,
	BreakNode,
	CaseNode,
	CatchNode,
	CharsNode,
	ClassDeclarationNode,
	ColonNode,
	CommaNode,
	CommentKeywordNode,
	CompilationUnitNode,
	ContinueNode,
	DecimalExponentPartNode,
	DecimalExponentSymbolNode,
	DecimalLiteralNode,
	DecNode,
	DivAssignNode,
	DivideNode,
	DoNode,
	DotNode,
	EllipsisNode,
	ElseNode,
	ElvisAssignNode,
	ElvisNode,
	EnumClassDeclarationNode,
	EqualNode,
	FinallyNode,
	FinalNode,
	ForNode,
	GreaterThanNode,
	GreaterThanOrEqualNode,
	HexadecimalLiteralNode,
	HexadecimalStartMarkNode,
	IdenticalNode,
	IdentifierNode,
	IfNode,
	ImportDeclarationNode,
	IncreaseNode,
	InstanceofNode,
	IntegralLiteralNode,
	InterfaceDeclarationNode,
	KwAbstractNode,
	KwAsNode,
	KwAtInterfaceNode,
	KwClassNode,
	KwConstNode,
	KwDefaultNode,
	KwDefNode,
	KwEnumNode,
	KwExtendsNode,
	KwGotoNode,
	KwImplementsNode,
	KwImportNode,
	KwInNode,
	KwInterfaceNode,
	KwNativeNode,
	KwNonSealedNode,
	KwPackageNode,
	KwPermitsNode,
	KwPrivateNode,
	KwProtectedNode,
	KwPublicNode,
	KwRecordNode,
	KwSealedNode,
	KwStaticNode,
	KwStrictfpNode,
	KwSynchronizedNode,
	KwTraitNode,
	KwVarNode,
	KwVolatileNode,
	LBraceNode,
	LBrackNode,
	LessThanNode,
	LessThanOrEqualNode,
	LParenNode,
	LshiftAssignNode,
	MethodPointerNode,
	MethodReferenceNode,
	ModAssignNode,
	ModNode,
	MulAssignNode,
	MultipleLinesCommentEndMarkNode,
	MultipleLinesCommentNode,
	MultipleLinesCommentStartMarkNode,
	MultipleNode,
	NewLineNode,
	NewNode,
	NotEqualNode,
	NotIdenticalNode,
	NotInNode,
	NotInstanceOfNode,
	NotNode,
	NullNode,
	NumericBasePartNode,
	NumericSignPartNode,
	NumericSuffixPartNode,
	NumericUnderscorePartNode,
	OctalLiteralNode,
	OctalStartMarkNode,
	OrAssignNode,
	OrNode,
	PackageDeclarationNode,
	PowerAssignNode,
	PowerNode,
	PtBooleanNode,
	PtByteNode,
	PtCharNode,
	PtDoubleNode,
	PtFloatNode,
	PtIntNode,
	PtLongNode,
	PtShortNode,
	QuestionNode,
	RangeExclusiveFullNode,
	RangeExclusiveLeftNode,
	RangeExclusiveRightNode,
	RangeInclusiveNode,
	RBraceNode,
	RBrackNode,
	RecordClassDeclarationNode,
	RegexFindNode,
	RegexMatchNode,
	ReturnNode,
	RParenNode,
	RshiftAssignNode,
	SafeChainDotNode,
	SafeDotNode,
	SafeIndexCloseNode,
	SafeIndexNode,
	ScriptCommandNode,
	ScriptCommandStartMarkNode,
	SemicolonNode,
	SingleLineCommentNode,
	SingleLineCommentStartMarkNode,
	SpaceshipNode,
	SpreadDotNode,
	SubAssignNode,
	SubtractNode,
	SuperNode,
	SwitchNode,
	TabsNode,
	ThisNode,
	ThreadsafeNode,
	ThrowNode,
	ThrowsNode,
	TraitClassDeclarationNode,
	TransientNode,
	TryNode,
	UndeterminedCharsNode,
	UnexpectedCharsNode,
	UrshiftAssignNode,
	VoidNode,
	WhileNode,
	WhitespacesNode,
	XorAssignNode,
	XorNode,
	YieldNode
} from './node';
import {TokenId} from './tokens';
import {
	ArrowCaptor,
	AsteriskCaptor,
	AstNodeCaptor,
	AstVisitor,
	AtInterfaceDeclarationCaptor,
	ClassDeclarationCaptor,
	CommaCaptor,
	DotCaptor,
	ElvisCaptor,
	EnumClassDeclarationCaptor,
	IdenticalCaptor,
	IdentifierCaptor,
	ImportDeclarationCaptor,
	InterfaceDeclarationCaptor,
	KwAbstractCaptor,
	KwAsCaptor,
	KwConstCaptor,
	KwDefaultCaptor,
	KwExtendsCaptor,
	KwGotoCaptor,
	KwImplementsCaptor,
	KwNativeCaptor,
	KwNonSealedCaptor,
	KwPermitsCaptor,
	KwPrivateCaptor,
	KwProtectedCaptor,
	KwPublicCaptor,
	KwSealedCaptor,
	KwStaticCaptor,
	KwStrictfpCaptor,
	KwSynchronizedCaptor,
	KwVolatileCaptor,
	LBraceCaptor,
	LBrackCaptor,
	LParenCaptor,
	MethodPointerCaptor,
	MethodReferenceCaptor,
	MultipleLinesCommentCaptor,
	NewLineStartsWithCarriageReturnCaptor,
	NewLineStartsWithNewLineCaptor,
	NotIdenticalCaptor,
	PackageDeclarationCaptor,
	PowerAssignCaptor,
	PowerCaptor,
	RangeExclusiveFullCaptor,
	RangeExclusiveLeftCaptor,
	RangeExclusiveRightCaptor,
	RangeInclusiveCaptor,
	RBraceCaptor,
	RBrackCaptor,
	RecordClassDeclarationCaptor,
	RegexFindCaptor,
	RegexMatchCaptor,
	RParenCaptor,
	SafeChainDotCaptor,
	SafeDotCaptor,
	SafeIndexCaptor,
	SafeIndexCloseCaptor,
	ScriptCommandCaptor,
	SemicolonCaptor,
	SingleLineCommentCaptor,
	SpaceshipCaptor,
	SpreadDotCaptor,
	TabsCaptor,
	TraitClassDeclarationCaptor,
	UndeterminedCharsCaptor,
	WhitespacesCaptor
} from './visit';

// constructor of elements
type ClassImplementsAstNode = new (...args: any[]) => AstNode;
type ClassImplementsAstNodeCaptor = new (astVisitor: AstVisitor) => AstNodeCaptor;

type CompilationUnitTokenId = TokenId.COMPILATION_UNIT;
type ScriptCommandMarkTokenId = TokenId.ScriptCommandStartMark;
type CommentTokenIds =
	| TokenId.SingleLineCommentStartMark
	| TokenId.MultipleLinesCommentStartMark
	| TokenId.MultipleLinesCommentEndMark
	| TokenId.CommentKeyword;
type PackageNoCaptorTokenId = TokenId.PACKAGE;
type ImportNoCaptorTokenId = TokenId.IMPORT
type TypeTokenIds =
	| TokenId.INTERFACE
	| TokenId.CLASS
	| TokenId.AT_INTERFACE
	| TokenId.ENUM
	| TokenId.RECORD
	| TokenId.TRAIT;
type CharsNoCaptorTokenId = TokenId.Chars | TokenId.UnexpectedChars;
type NoCaptorTokenIds =
	| CompilationUnitTokenId
	| ScriptCommandMarkTokenId
	| CommentTokenIds
	| PackageNoCaptorTokenId | ImportNoCaptorTokenId
	| TypeTokenIds
	| CharsNoCaptorTokenId;

type SpecialDefTokenIds = TokenId.NewLine;
type CaptorNotDefinedYetTokenIds = TokenId.AnnotationDeclaration;
type StandardDefTokenIds = Exclude<TokenId, NoCaptorTokenIds | SpecialDefTokenIds | CaptorNotDefinedYetTokenIds>;
type TokenAstDefsType = {
	[key in StandardDefTokenIds]: [ClassImplementsAstNode, ClassImplementsAstNodeCaptor]
} & {
	[key in NoCaptorTokenIds]: [ClassImplementsAstNode]
} & {
	[key in TokenId.NewLine]: [ClassImplementsAstNode, ClassImplementsAstNodeCaptor, ClassImplementsAstNodeCaptor]
} & {
	[key in CaptorNotDefinedYetTokenIds]: [ClassImplementsAstNode]
}

/**
 * list all token ids, nodes and captors
 */
export const TokenAstDefs: TokenAstDefsType = {
	[TokenId.COMPILATION_UNIT]: [CompilationUnitNode],
	// primitive types
	[TokenId.BOOLEAN]: [PtBooleanNode],
	[TokenId.CHAR]: [PtCharNode],
	[TokenId.BYTE]: [PtByteNode],
	[TokenId.SHORT]: [PtShortNode],
	[TokenId.INT]: [PtIntNode],
	[TokenId.LONG]: [PtLongNode],
	[TokenId.FLOAT]: [PtFloatNode],
	[TokenId.DOUBLE]: [PtDoubleNode],
	// groovy keywords
	[TokenId.AS]: [KwAsNode, KwAsCaptor],
	[TokenId.DEF]: [KwDefNode],
	[TokenId.IN]: [KwInNode],
	[TokenId.TRAIT]: [KwTraitNode],
	[TokenId.THREADSAFE]: [ThreadsafeNode],
	// java keywords
	[TokenId.ABSTRACT]: [KwAbstractNode, KwAbstractCaptor],
	[TokenId.ASSERT]: [AssertNode],
	[TokenId.AT_INTERFACE]: [KwAtInterfaceNode],
	[TokenId.BREAK]: [BreakNode],
	[TokenId.CASE]: [CaseNode],
	[TokenId.CATCH]: [CatchNode],
	[TokenId.CLASS]: [KwClassNode],
	[TokenId.CONST]: [KwConstNode, KwConstCaptor],
	[TokenId.CONTINUE]: [ContinueNode],
	[TokenId.DEFAULT]: [KwDefaultNode, KwDefaultCaptor],
	[TokenId.DO]: [DoNode],
	[TokenId.ELSE]: [ElseNode],
	[TokenId.ENUM]: [KwEnumNode],
	[TokenId.EXTENDS]: [KwExtendsNode, KwExtendsCaptor],
	[TokenId.FINAL]: [FinalNode],
	[TokenId.FINALLY]: [FinallyNode],
	[TokenId.FOR]: [ForNode],
	[TokenId.GOTO]: [KwGotoNode, KwGotoCaptor],
	[TokenId.IF]: [IfNode],
	[TokenId.IMPLEMENTS]: [KwImplementsNode, KwImplementsCaptor],
	[TokenId.IMPORT]: [KwImportNode],
	[TokenId.INSTANCEOF]: [InstanceofNode],
	[TokenId.INTERFACE]: [KwInterfaceNode],
	[TokenId.NATIVE]: [KwNativeNode, KwNativeCaptor],
	[TokenId.NEW]: [NewNode],
	[TokenId.NON_SEALED]: [KwNonSealedNode, KwNonSealedCaptor],
	[TokenId.NULL]: [NullNode],
	[TokenId.PACKAGE]: [KwPackageNode],
	[TokenId.PERMITS]: [KwPermitsNode, KwPermitsCaptor],
	[TokenId.PRIVATE]: [KwPrivateNode, KwPrivateCaptor],
	[TokenId.PROTECTED]: [KwProtectedNode, KwProtectedCaptor],
	[TokenId.PUBLIC]: [KwPublicNode, KwPublicCaptor],
	[TokenId.RECORD]: [KwRecordNode],
	[TokenId.RETURN]: [ReturnNode],
	[TokenId.SEALED]: [KwSealedNode, KwSealedCaptor],
	[TokenId.STATIC]: [KwStaticNode, KwStaticCaptor],
	[TokenId.STRICTFP]: [KwStrictfpNode, KwStrictfpCaptor],
	[TokenId.SUPER]: [SuperNode],
	[TokenId.SWITCH]: [SwitchNode],
	[TokenId.SYNCHRONIZED]: [KwSynchronizedNode, KwSynchronizedCaptor],
	[TokenId.THIS]: [ThisNode],
	[TokenId.THROW]: [ThrowNode],
	[TokenId.THROWS]: [ThrowsNode],
	[TokenId.TRANSIENT]: [TransientNode],
	[TokenId.TRY]: [TryNode],
	[TokenId.VAR]: [KwVarNode],
	[TokenId.VOID]: [VoidNode],
	[TokenId.VOLATILE]: [KwVolatileNode, KwVolatileCaptor],
	[TokenId.WHILE]: [WhileNode],
	[TokenId.YIELD]: [YieldNode],
	// boolean
	[TokenId.BooleanLiteral]: [BooleanLiteralNode],
	// numeric
	[TokenId.NumericSignPart]: [NumericSignPartNode],
	[TokenId.NumericBasePart]: [NumericBasePartNode],
	[TokenId.NumericUnderscorePart]: [NumericUnderscorePartNode],
	[TokenId.NumericSuffixPart]: [NumericSuffixPartNode],
	[TokenId.BinaryStartMark]: [BinaryStartMarkNode],
	[TokenId.BinaryLiteral]: [BinaryLiteralNode],
	[TokenId.OctalStartMark]: [OctalStartMarkNode],
	[TokenId.OctalLiteral]: [OctalLiteralNode],
	[TokenId.HexadecimalStartMark]: [HexadecimalStartMarkNode],
	[TokenId.HexadecimalLiteral]: [HexadecimalLiteralNode],
	[TokenId.IntegralLiteral]: [IntegralLiteralNode],
	[TokenId.DecimalExponentSymbol]: [DecimalExponentSymbolNode],
	[TokenId.DecimalExponentPart]: [DecimalExponentPartNode],
	[TokenId.DecimalLiteral]: [DecimalLiteralNode],
	// char
	[TokenId.GChar]: [],
	// string and gstring
	[TokenId.StringQuotationMark]: [],
	[TokenId.StringQuotationMarkML]: [],
	[TokenId.StringMLFirstNewLineEraser]: [],
	[TokenId.StringBackspaceEscape]: [],
	[TokenId.StringFormFeedEscape]: [],
	[TokenId.StringNewLineEscape]: [],
	[TokenId.StringCarriageReturnEscape]: [],
	[TokenId.StringSingleSpaceEscape]: [],
	[TokenId.StringTabulationEscape]: [],
	[TokenId.StringBackslashEscape]: [],
	[TokenId.StringSingleQuoteEscape]: [],
	[TokenId.StringDoubleQuoteEscape]: [],
	[TokenId.StringDollarEscape]: [],
	[TokenId.StringUnicodeEscape]: [],
	[TokenId.StringUnicodeEscapeMark]: [],
	[TokenId.StringUnicodeEscapeContent]: [],
	[TokenId.String]: [],
	[TokenId.GStringQuotationMark]: [],
	[TokenId.GStringQuotationMarkML]: [],
	[TokenId.SlashyGStringQuotationMark]: [],
	[TokenId.DollarSlashyGStringQuotationMarkBegin]: [],
	[TokenId.DollarSlashyGStringQuotationMarkEnd]: [],
	[TokenId.SlashyGStringBackslashEscape]: [],
	[TokenId.DollarSlashyGStringDollarEscape]: [],
	[TokenId.DollarSlashyGStringSlashEscape]: [],
	[TokenId.GStringContent]: [],
	[TokenId.GStringInterpolationSymbol]: [],
	[TokenId.GStringInterpolationContent]: [],
	[TokenId.GStringInterpolation]: [],
	[TokenId.GString]: [],
	[TokenId.SlashyGString]: [],
	[TokenId.DollarSlashyGString]: [],
	// Groovy Operators
	[TokenId.RangeInclusive]: [RangeInclusiveNode, RangeInclusiveCaptor],
	[TokenId.RangeExclusiveLeft]: [RangeExclusiveLeftNode, RangeExclusiveLeftCaptor],
	[TokenId.RangeExclusiveRight]: [RangeExclusiveRightNode, RangeExclusiveRightCaptor],
	[TokenId.RangeExclusiveFull]: [RangeExclusiveFullNode, RangeExclusiveFullCaptor],
	[TokenId.SpreadDot]: [SpreadDotNode, SpreadDotCaptor],
	[TokenId.SafeDot]: [SafeDotNode, SafeDotCaptor],
	[TokenId.SafeIndex]: [SafeIndexNode, SafeIndexCaptor],
	[TokenId.SafeIndexClose]: [SafeIndexCloseNode, SafeIndexCloseCaptor],
	[TokenId.SafeChainDot]: [SafeChainDotNode, SafeChainDotCaptor],
	[TokenId.Elvis]: [ElvisNode, ElvisCaptor],
	[TokenId.MethodPointer]: [MethodPointerNode, MethodPointerCaptor],
	[TokenId.MethodReference]: [MethodReferenceNode, MethodReferenceCaptor],
	[TokenId.RegexFind]: [RegexFindNode, RegexFindCaptor],
	[TokenId.RegexMatch]: [RegexMatchNode, RegexMatchCaptor],
	[TokenId.Power]: [PowerNode, PowerCaptor],
	[TokenId.PowerAssign]: [PowerAssignNode, PowerAssignCaptor],
	[TokenId.Spaceship]: [SpaceshipNode, SpaceshipCaptor],
	[TokenId.Identical]: [IdenticalNode, IdenticalCaptor],
	[TokenId.NotIdentical]: [NotIdenticalNode, NotIdenticalCaptor],
	[TokenId.Arrow]: [ArrowNode, ArrowCaptor],
	[TokenId.NotInstanceOf]: [NotInstanceOfNode],
	[TokenId.NotIn]: [NotInNode],
	// separators
	[TokenId.LBrace]: [LBraceNode, LBraceCaptor],
	[TokenId.RBrace]: [RBraceNode, RBraceCaptor],
	[TokenId.LParen]: [LParenNode, LParenCaptor],
	[TokenId.RParen]: [RParenNode, RParenCaptor],
	[TokenId.LBrack]: [LBrackNode, LBrackCaptor],
	[TokenId.RBrack]: [RBrackNode, RBrackCaptor],
	[TokenId.Semicolon]: [SemicolonNode, SemicolonCaptor],
	[TokenId.Comma]: [CommaNode, CommaCaptor],
	[TokenId.Dot]: [DotNode, DotCaptor],
	// operators
	[TokenId.Assign]: [AssignNode],
	[TokenId.GreaterThan]: [GreaterThanNode],
	[TokenId.LessThan]: [LessThanNode],
	[TokenId.Not]: [NotNode],
	[TokenId.Bitnot]: [BitnotNode],
	[TokenId.Question]: [QuestionNode],
	[TokenId.Colon]: [ColonNode],
	[TokenId.Equal]: [EqualNode],
	[TokenId.LessThanOrEqual]: [LessThanOrEqualNode],
	[TokenId.GreaterThanOrEqual]: [GreaterThanOrEqualNode],
	[TokenId.NotEqual]: [NotEqualNode],
	[TokenId.And]: [AndNode],
	[TokenId.Or]: [OrNode],
	[TokenId.Increase]: [IncreaseNode],
	[TokenId.Dec]: [DecNode],
	[TokenId.Add]: [AddNode],
	[TokenId.Subtract]: [SubtractNode],
	[TokenId.Multiple]: [MultipleNode],
	[TokenId.Divide]: [DivideNode],
	[TokenId.Bitand]: [BitandNode],
	[TokenId.Bitor]: [BitorNode],
	[TokenId.Xor]: [XorNode],
	[TokenId.Mod]: [ModNode],
	[TokenId.AddAssign]: [AddAssignNode],
	[TokenId.SubAssign]: [SubAssignNode],
	[TokenId.MulAssign]: [MulAssignNode],
	[TokenId.DivAssign]: [DivAssignNode],
	[TokenId.AndAssign]: [AndAssignNode],
	[TokenId.OrAssign]: [OrAssignNode],
	[TokenId.XorAssign]: [XorAssignNode],
	[TokenId.ModAssign]: [ModAssignNode],
	[TokenId.LshiftAssign]: [LshiftAssignNode],
	[TokenId.RshiftAssign]: [RshiftAssignNode],
	[TokenId.UrshiftAssign]: [UrshiftAssignNode],
	[TokenId.ElvisAssign]: [ElvisAssignNode],
	[TokenId.Ellipsis]: [EllipsisNode],
	[TokenId.Asterisk]: [AsteriskNode, AsteriskCaptor],
	// comment
	[TokenId.CommentKeyword]: [CommentKeywordNode],
	[TokenId.SingleLineCommentStartMark]: [SingleLineCommentStartMarkNode],
	[TokenId.SingleLineComment]: [SingleLineCommentNode, SingleLineCommentCaptor],
	[TokenId.MultipleLinesCommentStartMark]: [MultipleLinesCommentStartMarkNode],
	[TokenId.MultipleLinesCommentEndMark]: [MultipleLinesCommentEndMarkNode],
	[TokenId.MultipleLinesComment]: [MultipleLinesCommentNode, MultipleLinesCommentCaptor],
	// shebang command
	[TokenId.ScriptCommandStartMark]: [ScriptCommandStartMarkNode],
	[TokenId.ScriptCommand]: [ScriptCommandNode, ScriptCommandCaptor],
	// text content
	[TokenId.Whitespaces]: [WhitespacesNode, WhitespacesCaptor],
	[TokenId.Tabs]: [TabsNode, TabsCaptor],
	[TokenId.NewLine]: [NewLineNode, NewLineStartsWithNewLineCaptor, NewLineStartsWithCarriageReturnCaptor],
	[TokenId.Chars]: [CharsNode],
	[TokenId.Identifier]: [IdentifierNode, IdentifierCaptor],
	[TokenId.UndeterminedChars]: [UndeterminedCharsNode, UndeterminedCharsCaptor],
	[TokenId.UnexpectedChars]: [UnexpectedCharsNode],
	// statements
	[TokenId.PackageDeclaration]: [PackageDeclarationNode, PackageDeclarationCaptor],
	[TokenId.ImportDeclaration]: [ImportDeclarationNode, ImportDeclarationCaptor],
	[TokenId.InterfaceDeclaration]: [InterfaceDeclarationNode, InterfaceDeclarationCaptor],
	[TokenId.ClassDeclaration]: [ClassDeclarationNode, ClassDeclarationCaptor],
	[TokenId.AtInterfaceClassDeclaration]: [AtInterfaceDeclarationNode, AtInterfaceDeclarationCaptor],
	[TokenId.EnumClassDeclaration]: [EnumClassDeclarationNode, EnumClassDeclarationCaptor],
	[TokenId.RecordClassDeclaration]: [RecordClassDeclarationNode, RecordClassDeclarationCaptor],
	[TokenId.TraitClassDeclaration]: [TraitClassDeclarationNode, TraitClassDeclarationCaptor],
	[TokenId.AnnotationDeclaration]: [AnnotationDeclarationNode]
} as const;