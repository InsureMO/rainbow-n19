import {TokenId, TokenType} from '../../tokens';
import {IdentifierCaptor} from '../identifier-captor';
import {Newline1CharCaptor, Newline2CharsCaptor} from '../newline-captors';
import {
	LtNumericBasePartCaptorStartsWith0,
	LtNumericBasePartCaptorStartsWith1,
	LtNumericBasePartCaptorStartsWith2,
	LtNumericBasePartCaptorStartsWith3,
	LtNumericBasePartCaptorStartsWith4,
	LtNumericBasePartCaptorStartsWith5,
	LtNumericBasePartCaptorStartsWith6,
	LtNumericBasePartCaptorStartsWith7,
	LtNumericBasePartCaptorStartsWith8,
	LtNumericBasePartCaptorStartsWith9,
	LtNumericBasePartCaptorStartsWithDot
} from '../numeric-base-part-captor';
import {LtOctalEscapeCaptor} from '../octal-escape-captor';
import {UndeterminedCharsCaptor} from '../undetermined-chars-captor';
import {LtUnicodeEscapeCaptor} from '../unicode-escape-captor';
import {AtomicTokenBasisType, KwCh, KwKw, KwLt, KwMk, KwOp, KwPt, Tt} from './internal';

export const AtomicTokenBasis: Readonly<Partial<{ [key in TokenId]: AtomicTokenBasisType }>> = {
	// primitive types
	[TokenId.BOOLEAN]: [Tt.Pt, KwPt.BOOLEAN, 'PtBoolean'],
	[TokenId.CHAR]: [Tt.Pt, KwPt.CHAR, 'PtChar'],
	[TokenId.BYTE]: [Tt.Pt, KwPt.BYTE, 'PtByte'],
	[TokenId.SHORT]: [Tt.Pt, KwPt.SHORT, 'PtShort'],
	[TokenId.INT]: [Tt.Pt, KwPt.INT, 'PtInt'],
	[TokenId.LONG]: [Tt.Pt, KwPt.LONG, 'PtLong'],
	[TokenId.FLOAT]: [Tt.Pt, KwPt.FLOAT, 'PtFloat'],
	[TokenId.DOUBLE]: [Tt.Pt, KwPt.DOUBLE, 'PtDouble'],
	// groovy keywords
	[TokenId.AS]: [Tt.Gk, KwKw.As, 'GkAs'],
	[TokenId.DEF]: [Tt.Gk, KwKw.Def, 'GkDef'],
	[TokenId.TRAIT]: [Tt.Gk, KwKw.Trait, 'GkTrait'],
	[TokenId.THREADSAFE]: [Tt.Gk, KwKw.AtThreadsafe, 'GkAtThreadSafe'],
	// java keywords
	[TokenId.ABSTRACT]: [Tt.Jk, KwKw.Abstract, 'JkAbstract'],
	[TokenId.ASSERT]: [Tt.Jk, KwKw.Assert, 'JkAssert'],
	[TokenId.AT_INTERFACE]: [Tt.Jk, KwKw.AtInterface, 'JkAtInterface'],
	[TokenId.BREAK]: [Tt.Jk, KwKw.Break, 'JkBreak'],
	[TokenId.CASE]: [Tt.Jk, KwKw.Case, 'JkCase'],
	[TokenId.CATCH]: [Tt.Jk, KwKw.Catch, 'JkCatch'],
	[TokenId.CLASS]: [Tt.Jk, KwKw.Class, 'JkClass'],
	[TokenId.CONST]: [Tt.Jk, KwKw.Const, 'JkConst'],
	[TokenId.CONTINUE]: [Tt.Jk, KwKw.Continue, 'JkContinue'],
	[TokenId.DEFAULT]: [Tt.Jk, KwKw.Default, 'JkDefault'],
	[TokenId.DO]: [Tt.Jk, KwKw.Do, 'JkDo'],
	[TokenId.ELSE]: [Tt.Jk, KwKw.Else, 'JkElse'],
	[TokenId.ENUM]: [Tt.Jk, KwKw.Enum, 'JkEnum'],
	[TokenId.EXTENDS]: [Tt.Jk, KwKw.Extends, 'JkExtends'],
	[TokenId.FINAL]: [Tt.Jk, KwKw.Final, 'JkFinal'],
	[TokenId.FINALLY]: [Tt.Jk, KwKw.Finally, 'JkFinally'],
	[TokenId.FOR]: [Tt.Jk, KwKw.For, 'JkFor'],
	[TokenId.GOTO]: [Tt.Jk, KwKw.Goto, 'JkGoto'],
	[TokenId.IF]: [Tt.Jk, KwKw.If, 'JkIf'],
	[TokenId.IMPLEMENTS]: [Tt.Jk, KwKw.Implements, 'JkImplements'],
	[TokenId.IMPORT]: [Tt.Jk, KwKw.Import, 'JkImport'],
	[TokenId.INTERFACE]: [Tt.Jk, KwKw.Interface, 'JkInterface'],
	[TokenId.NATIVE]: [Tt.Jk, KwKw.Native, 'JkNative'],
	[TokenId.NEW]: [Tt.Jk, KwKw.New, 'JkNew'],
	[TokenId.NON_SEALED]: [Tt.Jk, KwKw.NonSealed, 'JkNonSealed'],
	[TokenId.NULL]: [Tt.Jk, KwKw.Null, 'JkNull'],
	[TokenId.PACKAGE]: [Tt.Jk, KwKw.Package, 'JkPackage'],
	[TokenId.PERMITS]: [Tt.Jk, KwKw.Permits, 'JkPermits'],
	[TokenId.PRIVATE]: [Tt.Jk, KwKw.Private, 'JkPrivate'],
	[TokenId.PROTECTED]: [Tt.Jk, KwKw.Protected, 'JkProtected'],
	[TokenId.PUBLIC]: [Tt.Jk, KwKw.Public, 'JkPublic'],
	[TokenId.RECORD]: [Tt.Jk, KwKw.Record, 'JkRecord'],
	[TokenId.RETURN]: [Tt.Jk, KwKw.Return, 'JkReturn'],
	[TokenId.SEALED]: [Tt.Jk, KwKw.Sealed, 'JkSealed'],
	[TokenId.STATIC]: [Tt.Jk, KwKw.Static, 'JkStatic'],
	[TokenId.STRICTFP]: [Tt.Jk, KwKw.Strictfp, 'JkStrictfp'],
	[TokenId.SUPER]: [Tt.Jk, KwKw.Super, 'JkSuper'],
	[TokenId.SWITCH]: [Tt.Jk, KwKw.Switch, 'JkSwitch'],
	[TokenId.SYNCHRONIZED]: [Tt.Jk, KwKw.Synchronized, 'JkSynchronized'],
	[TokenId.THIS]: [Tt.Jk, KwKw.This, 'JkThis'],
	[TokenId.THROW]: [Tt.Jk, KwKw.Throw, 'JkThrow'],
	[TokenId.THROWS]: [Tt.Jk, KwKw.Throws, 'JkThrows'],
	[TokenId.TRANSIENT]: [Tt.Jk, KwKw.Transient, 'JkTransient'],
	[TokenId.TRY]: [Tt.Jk, KwKw.Try, 'JkTry'],
	[TokenId.VAR]: [Tt.Jk, KwKw.Var, 'JkVar'],
	[TokenId.VOID]: [Tt.Jk, KwKw.Void, 'JkVoid'],
	[TokenId.VOLATILE]: [Tt.Jk, KwKw.Volatile, 'JkVolatile'],
	[TokenId.WHILE]: [Tt.Jk, KwKw.While, 'JkWhile'],
	[TokenId.YIELD]: [Tt.Jk, KwKw.Yield, 'JkYield'],
	// boolean
	[TokenId.BooleanTrue]: [Tt.Bl, KwLt.TRUE, 'LtBooleanTrue'],
	[TokenId.BooleanFalse]: [Tt.Bl, KwLt.FALSE, 'LtBooleanFalse'],
	// numeric
	[TokenId.NumericBasePart]: [Tt.Nl, [
		LtNumericBasePartCaptorStartsWith0, LtNumericBasePartCaptorStartsWith1, LtNumericBasePartCaptorStartsWith2,
		LtNumericBasePartCaptorStartsWith3, LtNumericBasePartCaptorStartsWith4, LtNumericBasePartCaptorStartsWith5,
		LtNumericBasePartCaptorStartsWith6, LtNumericBasePartCaptorStartsWith7, LtNumericBasePartCaptorStartsWith8,
		LtNumericBasePartCaptorStartsWith9,
		LtNumericBasePartCaptorStartsWithDot
	]],
	// string and gstring
	[TokenId.StringQuotationMark]: [Tt.Sl, KwLt.StringQuotationMark, 'LtStringQuotationMark'],
	[TokenId.StringQuotationMarkML]: [Tt.Sl, KwLt.StringQuotationMarkML, 'LtStringQuotationMarkML'],
	[TokenId.StringBackspaceEscape]: [Tt.Sl, KwLt.StringBackspaceEscape, 'LtStringBackspaceEscape'],
	[TokenId.StringFormFeedEscape]: [Tt.Sl, KwLt.StringFormFeedEscape, 'LtStringFormFeedEscape'],
	[TokenId.StringNewlineEscape]: [Tt.Sl, KwLt.StringNewlineEscape, 'LtStringNewlineEscape'],
	[TokenId.StringCarriageReturnEscape]: [Tt.Sl, KwLt.StringCarriageReturnEscape, 'LtStringCarriageReturnEscape'],
	[TokenId.StringTabulationEscape]: [Tt.Sl, KwLt.StringTabulationEscape, 'LtStringTabulationEscape'],
	[TokenId.StringBackslashEscape]: [Tt.Sl, KwLt.StringBackslashEscape, 'LtStringBackslashEscape'],
	[TokenId.StringSingleQuoteEscape]: [Tt.Sl, KwLt.StringSingleQuoteEscape, 'LtStringSingleQuoteEscape'],
	[TokenId.StringDoubleQuoteEscape]: [Tt.Sl, KwLt.StringDoubleQuoteEscape, 'LtStringDoubleQuoteEscape'],
	[TokenId.StringDollarEscape]: [Tt.Sl, KwLt.StringDollarEscape, 'LtStringDollarEscape'],
	[TokenId.StringOctalEscape]: [Tt.Sl, LtOctalEscapeCaptor],
	[TokenId.StringUnicodeEscape]: [Tt.Sl, LtUnicodeEscapeCaptor],
	[TokenId.GStringQuotationMark]: [Tt.Sl, KwLt.GStringQuotationMark, 'LtGStringQuotationMark'],
	[TokenId.GStringQuotationMarkML]: [Tt.Sl, KwLt.GStringQuotationMarkML, 'LtGStringQuotationMarkML'],
	[TokenId.DollarSlashyGStringQuotationStartMark]: [Tt.Sl, KwLt.DollarSlashyGStringQuotationStartMark, 'LtDollarSlashyGStringQuotationStartMark'],
	[TokenId.DollarSlashyGStringQuotationEndMark]: [Tt.Sl, KwLt.DollarSlashyGStringQuotationEndMark, 'LtDollarSlashyGStringQuotationEndMark'],
	[TokenId.SlashyGStringSlashEscape]: [Tt.Sl, KwLt.SlashyGStringSlashEscape, 'LtSlashyGStringSlashEscape'],
	[TokenId.DollarSlashyGStringDollarEscape]: [Tt.Sl, KwLt.DollarSlashyGStringDollarEscape, 'LtDollarSlashyGStringDollarEscape'],
	[TokenId.GStringInterpolationLBraceStartMark]: [Tt.Sl, KwLt.GStringInterpolationLBraceStartMark, 'LtGStringInterpolationLBraceStartMark'],
	// Groovy Operators
	[TokenId.RangeInclusive]: [Tt.Go, KwOp.RangeInclusive, 'GoRangeInclusive'],
	[TokenId.RangeExclusiveLeft]: [Tt.Go, KwOp.RangeExclusiveLeft, 'GoRangeExclusiveLeft'],
	[TokenId.RangeExclusiveRight]: [Tt.Go, KwOp.RangeExclusiveRight, 'GoRangeExclusiveRight'],
	[TokenId.RangeExclusiveFull]: [Tt.Go, KwOp.RangeExclusiveFull, 'GoRangeExclusiveFull'],
	[TokenId.SpreadDot]: [Tt.Go, KwOp.SpreadDot, 'GoSpreadDot'],
	[TokenId.SafeDot]: [Tt.Go, KwOp.SafeDot, 'GoSafeDot'],
	[TokenId.SafeIndex]: [Tt.Go, KwOp.SafeIndex, 'GoSafeIndex'],
	[TokenId.SafeChainDot]: [Tt.Go, KwOp.SafeChainDot, 'GoSafeChainDot'],
	[TokenId.Elvis]: [Tt.Go, KwOp.Elvis, 'GoElvis'],
	[TokenId.ElvisAssign]: [Tt.Jo, KwOp.ElvisAssign, 'GoElvisAssign'],
	[TokenId.MethodPointer]: [Tt.Go, KwOp.MethodPointer, 'GoMethodPointer'],
	[TokenId.RegexFind]: [Tt.Go, KwOp.RegexFind, 'GoRegexFind'],
	[TokenId.RegexMatch]: [Tt.Go, KwOp.RegexMatch, 'GoRegexMatch'],
	[TokenId.Power]: [Tt.Go, KwOp.Power, 'GoPower'],
	[TokenId.PowerAssign]: [Tt.Go, KwOp.PowerAssign, 'GoPowerAssign'],
	[TokenId.Spaceship]: [Tt.Go, KwOp.Spaceship, 'GoSpaceship'],
	[TokenId.Identical]: [Tt.Go, KwOp.Identical, 'GoIdentical'],
	[TokenId.NotIdentical]: [Tt.Go, KwOp.NotIdentical, 'GoNotIdentical'],
	[TokenId.IN]: [Tt.Go, KwOp.In, 'GoIn'],
	[TokenId.NOT_IN]: [Tt.Go, KwOp.NotIn, 'GoNotIn'],
	[TokenId.NOT_INSTANCEOF]: [Tt.Go, KwOp.NotInstanceof, 'GoNotInstanceof'],
	// operators
	[TokenId.Assign]: [Tt.Jo, KwOp.Assign, 'JoAssign'],
	[TokenId.GreaterThan]: [Tt.Jo, KwOp.GreaterThan, 'JoGreaterThan'],
	[TokenId.LessThan]: [Tt.Jo, KwOp.LessThan, 'JoLessThan'],
	[TokenId.Not]: [Tt.Jo, KwOp.Not, 'JoNot'],
	[TokenId.Bitnot]: [Tt.Jo, KwOp.Bitnot, 'JoBitnot'],
	[TokenId.Question]: [Tt.Jo, KwOp.Question, 'JoQuestion'],
	[TokenId.Colon]: [Tt.Jo, KwOp.Colon, 'JoColon'],
	[TokenId.Equal]: [Tt.Jo, KwOp.Equal, 'JoEqual'],
	[TokenId.LessThanOrEqual]: [Tt.Jo, KwOp.LessThanOrEqual, 'JoLessThanOrEqual'],
	[TokenId.GreaterThanOrEqual]: [Tt.Jo, KwOp.GreaterThanOrEqual, 'JoGreaterThanOrEqual'],
	[TokenId.NotEqual]: [Tt.Jo, KwOp.NotEqual, 'JoNotEqual'],
	[TokenId.And]: [Tt.Jo, KwOp.And, 'JoAnd'],
	[TokenId.Or]: [Tt.Jo, KwOp.Or, 'JoOr'],
	[TokenId.Increase]: [Tt.Jo, KwOp.Increase, 'JoIncrease'],
	[TokenId.Decrease]: [Tt.Jo, KwOp.Decrease, 'JoDecrease'],
	[TokenId.Add]: [Tt.Jo, KwOp.Add, 'JoAdd'],
	[TokenId.Subtract]: [Tt.Jo, KwOp.Subtract, 'JoSubtract'],
	[TokenId.Multiple]: [Tt.Jo, KwOp.Multiple, 'JoMultiple'],
	[TokenId.Divide]: [Tt.Jo, KwOp.Divide, 'JoDivide'],
	[TokenId.Bitand]: [Tt.Jo, KwOp.Bitand, 'JoBitand'],
	[TokenId.Bitor]: [Tt.Jo, KwOp.Bitor, 'JoBitor'],
	[TokenId.Xor]: [Tt.Jo, KwOp.Xor, 'JoXor'],
	[TokenId.Mod]: [Tt.Jo, KwOp.Mod, 'JoMod'],
	[TokenId.Lshift]: [Tt.Jo, KwOp.Lshift, 'JoLshift'],
	[TokenId.Rshift]: [Tt.Jo, KwOp.Rshift, 'JoRshift'],
	[TokenId.Urshift]: [Tt.Jo, KwOp.Urshift, 'JoUrshift'],
	[TokenId.AddAssign]: [Tt.Jo, KwOp.AddAssign, 'JoAddAssign'],
	[TokenId.SubtractAssign]: [Tt.Jo, KwOp.SubtractAssign, 'JoSubtractAssign'],
	[TokenId.MultipleAssign]: [Tt.Jo, KwOp.MultipleAssign, 'JoMultipleAssign'],
	[TokenId.DivideAssign]: [Tt.Jo, KwOp.DivideAssign, 'JoDivideAssign'],
	[TokenId.BitandAssign]: [Tt.Jo, KwOp.BitandAssign, 'JoBitandAssign'],
	[TokenId.BitorAssign]: [Tt.Jo, KwOp.BitorAssign, 'JoBitorAssign'],
	[TokenId.XorAssign]: [Tt.Jo, KwOp.XorAssign, 'JoXorAssign'],
	[TokenId.ModAssign]: [Tt.Jo, KwOp.ModAssign, 'JoModAssign'],
	[TokenId.LshiftAssign]: [Tt.Jo, KwOp.LshiftAssign, 'JoLshiftAssign'],
	[TokenId.RshiftAssign]: [Tt.Jo, KwOp.RshiftAssign, 'JoRshiftAssign'],
	[TokenId.UrshiftAssign]: [Tt.Jo, KwOp.UrshiftAssign, 'JoUrshiftAssign'],
	[TokenId.MethodReference]: [Tt.Go, KwOp.MethodReference, 'JoMethodReference'],
	[TokenId.Ellipsis]: [Tt.Jo, KwOp.Ellipsis, 'JoEllipsis'],
	[TokenId.Arrow]: [Tt.Jo, KwOp.Arrow, 'JoArrow'],
	[TokenId.INSTANCEOF]: [Tt.Jo, KwOp.Instanceof, 'JoInstanceof'],
	// separators
	[TokenId.LBrace]: [Tt.Sp, KwCh.LBrace, 'SpLBrace'],
	[TokenId.RBrace]: [Tt.Sp, KwCh.RBrace, 'SpRBrace'],
	[TokenId.LParen]: [Tt.Sp, KwCh.LParen, 'SpLParen'],
	[TokenId.RParen]: [Tt.Sp, KwCh.RParen, 'SpRParen'],
	[TokenId.LBrack]: [Tt.Sp, KwCh.LBrack, 'SpLBrack'],
	[TokenId.RBrack]: [Tt.Sp, KwCh.RBrack, 'SpRBrack'],
	[TokenId.At]: [Tt.Sp, KwCh.At, 'SpAt'],
	[TokenId.Semicolon]: [Tt.Sp, KwCh.Semicolon, 'SpSemicolon'],
	[TokenId.Comma]: [Tt.Sp, KwCh.Comma, 'SpComma'],
	[TokenId.Dot]: [Tt.Sp, KwCh.Dot, 'SpDot'],
	// comments mark
	[TokenId.SingleLineCommentStartMark]: [Tt.Cm, KwMk.SLCommentStart, 'SingleLineCommentStartMark'],
	[TokenId.MultipleLinesCommentStartMark]: [Tt.Cm, KwMk.MLCommentStart, 'MultipleLinesCommentStartMark'],
	[TokenId.MultipleLinesCommentEndMark]: [Tt.Cm, KwMk.MLCommentEnd, 'MultipleLinesCommentEndMark'],
	// script comment mark
	[TokenId.ScriptCommandStartMark]: [Tt.Scm, KwMk.ScriptCommandStart, 'ScriptCommandStartMark'],
	// char(s)
	[TokenId.Whitespaces]: [Tt.Sch, KwCh.Whitespace, 'Whitespaces', TokenType.WhitespaceOrTabs],
	[TokenId.Tabs]: [Tt.Sch, KwCh.Tab, 'Tabs', TokenType.WhitespaceOrTabs],
	[TokenId.Newline]: [Tt.Snl, [Newline1CharCaptor, Newline2CharsCaptor]],
	[TokenId.Identifier]: [Tt.Ct, IdentifierCaptor],
	[TokenId.UndeterminedChars]: [Tt.Ct, UndeterminedCharsCaptor]
};
