import {UDF} from '../../../utils';
import {DocsCollector} from '../../DocsCollector';

DocsCollector.collect('java.util.SplittableRandom', [
	[/* class description */
		[/* text */ 't', `A generator of uniform pseudorandom values (with period 2`],
		[/* text */ 't', `64`, 'sup'],
		[/* text */ 't', `)
 applicable for use in (among other contexts) isolated parallel
 computations that may generate subtasks. Class `],
		[/* inline code block */ 'i', `SplittableRandom`],
		[/* text */ 't', `
 supports methods for producing pseudorandom numbers of type `],
		[/* inline code block */ 'i', `int`],
		[/* text */ 't', `,
 `],
		[/* inline code block */ 'i', `long`],
		[/* text */ 't', `, and `],
		[/* inline code block */ 'i', `double`],
		[/* text */ 't', ` with similar usages as for class
 `],
		[/* reference */ 'r', `java.util.Random`, `Random`],
		[/* text */ 't', ` but differs in the following ways:

 `],
		[/* list */ 'l', [
			[/* block */ 'b', [
				[/* text */ 't', `Series of generated values pass the DieHarder suite testing
 independence and uniformity properties of random number generators.
 (Most recently validated with `],
				[/* external link */ 'a', `http://www.phy.duke.edu/~rgb/General/dieharder.php`, `version 3.31.1`],
				[/* text */ 't', `.) These tests validate only the methods for certain
 types and ranges, but similar properties are expected to hold, at
 least approximately, for others as well. The `],
				[/* text */ 't', `period`],
				[/* text */ 't', `
 (length of any series of generated values before it repeats) is
 2`],
				[/* text */ 't', `64`, 'sup'],
				[/* text */ 't', `. `]
			]],
			[/* block */ 'b', [
				[/* text */ 't', ` Method `],
				[/* reference */ 'r', `#split()`, `split()`],
				[/* text */ 't', ` constructs and returns a new
 SplittableRandom instance that shares no mutable state with the
 current instance. However, with very high probability, the
 values collectively generated by the two objects have the same
 statistical properties as if the same quantity of values were
 generated by a single thread using a single `],
				[/* inline code block */ 'i', `SplittableRandom`],
				[/* text */ 't', ` object.  `]
			]],
			[/* block */ 'b', [
				[/* text */ 't', `Instances of SplittableRandom are `],
				[/* text */ 't', `not`],
				[/* text */ 't', ` thread-safe.
 They are designed to be split, not shared, across threads. For
 example, a `],
				[/* reference */ 'r', `java.util.concurrent.ForkJoinTask`, `fork/join-style`],
				[/* text */ 't', ` computation using random numbers might include a
 construction of the form `],
				[/* inline code block */ 'i', `new Subtask(aSplittableRandom.split()).fork()`],
				[/* text */ 't', `.

 `]
			]],
			[/* block */ 'b', [
				[/* text */ 't', `This class provides additional methods for generating random
 streams, that employ the above techniques when used in `],
				[/* inline code block */ 'i', `stream.parallel()`],
				[/* text */ 't', ` mode.`]
			]]
		]],
		[/* text */ 't', `

 `],
		[/* block */ 'b', [
			[/* text */ 't', `Instances of `],
			[/* inline code block */ 'i', `SplittableRandom`],
			[/* text */ 't', ` are not cryptographically
 secure.  Consider instead using `],
			[/* reference */ 'r', `java.security.SecureRandom`, `SecureRandom`],
			[/* text */ 't', `
 in security-sensitive applications. Additionally,
 default-constructed instances do not use a cryptographically random
 seed unless the `],
			[/* reference */ 'r', `java.lang.System#getProperty(java.lang.String)`, `system property`],
			[/* text */ 't', `
 `],
			[/* inline code block */ 'i', `java.util.secureRandomSeed`],
			[/* text */ 't', ` is set to `],
			[/* inline code block */ 'i', `true`],
			[/* text */ 't', `.`]
		]]
	],
	/* fields */,
	[/* constructors */
		[/* constructor */ '<init>()', [
			[/* constructor description */
				[/* text */ 't', `Creates a new SplittableRandom instance that is likely to
 generate sequences of values that are statistically independent
 of those of any other instances in the current program; and
 may, and typically does, vary across program invocations.`]
			],
			/* parameters */,
			/* throws */ UDF
		]],
		[/* constructor */ '<init>(long)', [
			[/* constructor description */
				[/* text */ 't', `Creates a new SplittableRandom instance using the specified
 initial seed. SplittableRandom instances created with the same
 seed in the same program generate identical sequences of values.`]
			],
			[/* parameters */
				[/* parameter */ 'seed', [/* parameter description */
					[/* text */ 't', `the initial seed`]
				]]
			],
			/* throws */ UDF
		]]
	],
	[/* methods */
		[/* method */ 'nextInt()', UDF],
		[/* method */ 'split()', [
			[/* method description */
				[/* text */ 't', `Constructs and returns a new SplittableRandom instance that
 shares no mutable state with this instance. However, with very
 high probability, the set of values collectively generated by
 the two objects has the same statistical properties as if the
 same quantity of values were generated by a single thread using
 a single SplittableRandom object.  Either or both of the two
 objects may be further split using the `],
				[/* inline code block */ 'i', `split()`],
				[/* text */ 't', ` method,
 and the same expected statistical properties apply to the
 entire set of generators constructed by such recursive
 splitting.`]
			],
			/* parameters */,
			/* throws */,
			[/* return description */
				[/* text */ 't', `the new SplittableRandom instance`]
			]
		]],
		[/* method */ 'split(java.util.random.RandomGenerator.SplittableGenerator)', [
			[/* method description */
				[/* text */ 't', `Returns a new pseudorandom number generator, split off from this one,
 that implements the `],
				[/* reference */ 'r', `java.util.random.RandomGenerator`, `RandomGenerator`],
				[/* text */ 't', ` and
 `],
				[/* reference */ 'r', `java.util.random.RandomGenerator.SplittableGenerator`, `RandomGenerator.SplittableGenerator`],
				[/* text */ 't', ` interfaces.`]
			],
			[/* parameters */
				[/* parameter */ 'source', [/* parameter description */
					[/* text */ 't', `a `],
					[/* reference */ 'r', `java.util.random.RandomGenerator.SplittableGenerator`, `RandomGenerator.SplittableGenerator`],
					[/* text */ 't', ` instance to be used instead
               of this one as a source of pseudorandom bits used to
               initialize the state of the new ones.`]
				]]
			],
			[/* throws */
				[/* throw */ 'java.lang.NullPointerException', [/* throw description */
					[/* text */ 't', `if source is null`]
				]]
			],
			[/* return description */
				[/* text */ 't', `an object that implements the `],
				[/* reference */ 'r', `java.util.random.RandomGenerator`, `RandomGenerator`],
				[/* text */ 't', ` and
         `],
				[/* reference */ 'r', `java.util.random.RandomGenerator.SplittableGenerator`, `RandomGenerator.SplittableGenerator`],
				[/* text */ 't', ` interfaces`]
			]
		]],
		[/* method */ 'doubles()', [
			[/* method description */
				[/* text */ 't', `Returns an effectively unlimited stream of pseudorandom `],
				[/* inline code block */ 'i', `double`],
				[/* text */ 't', ` values from this generator and/or one split from it; each value
 is between zero (inclusive) and one (exclusive).`]
			],
			/* parameters */,
			/* throws */,
			[/* return description */
				[/* text */ 't', `a stream of pseudorandom `],
				[/* inline code block */ 'i', `double`],
				[/* text */ 't', ` values`]
			]
		]],
		[/* method */ 'doubles(double,double)', [
			[/* method description */
				[/* text */ 't', `Returns an effectively unlimited stream of pseudorandom `],
				[/* inline code block */ 'i', `double`],
				[/* text */ 't', ` values from this generator and/or one split from it; each value
 conforms to the given origin (inclusive) and bound (exclusive).`]
			],
			[/* parameters */
				[/* parameter */ 'randomNumberOrigin', [/* parameter description */
					[/* text */ 't', `the origin (inclusive) of each random value`]
				]],
				[/* parameter */ 'randomNumberBound', [/* parameter description */
					[/* text */ 't', `the bound (exclusive) of each random value`]
				]]
			],
			[/* throws */
				[/* throw */ 'java.lang.IllegalArgumentException', [/* throw description */
					[/* text */ 't', `if `],
					[/* inline code block */ 'i', `randomNumberOrigin`],
					[/* text */ 't', `
         is greater than or equal to `],
					[/* inline code block */ 'i', `randomNumberBound`]
				]]
			],
			[/* return description */
				[/* text */ 't', `a stream of pseudorandom `],
				[/* inline code block */ 'i', `double`],
				[/* text */ 't', ` values,
         each with the given origin (inclusive) and bound (exclusive)`]
			]
		]],
		[/* method */ 'doubles(long)', [
			[/* method description */
				[/* text */ 't', `Returns a stream producing the given `],
				[/* inline code block */ 'i', `streamSize`],
				[/* text */ 't', ` number of
 pseudorandom `],
				[/* inline code block */ 'i', `double`],
				[/* text */ 't', ` values from this generator and/or one split
 from it; each value is between zero (inclusive) and one (exclusive).`]
			],
			[/* parameters */
				[/* parameter */ 'streamSize', [/* parameter description */
					[/* text */ 't', `the number of values to generate`]
				]]
			],
			[/* throws */
				[/* throw */ 'java.lang.IllegalArgumentException', [/* throw description */
					[/* text */ 't', `if `],
					[/* inline code block */ 'i', `streamSize`],
					[/* text */ 't', ` is
         less than zero`]
				]]
			],
			[/* return description */
				[/* text */ 't', `a stream of `],
				[/* inline code block */ 'i', `double`],
				[/* text */ 't', ` values`]
			]
		]],
		[/* method */ 'doubles(long,double,double)', [
			[/* method description */
				[/* text */ 't', `Returns a stream producing the given `],
				[/* inline code block */ 'i', `streamSize`],
				[/* text */ 't', ` number of
 pseudorandom `],
				[/* inline code block */ 'i', `double`],
				[/* text */ 't', ` values from this generator and/or one split
 from it; each value conforms to the given origin (inclusive) and bound
 (exclusive).`]
			],
			[/* parameters */
				[/* parameter */ 'streamSize', [/* parameter description */
					[/* text */ 't', `the number of values to generate`]
				]],
				[/* parameter */ 'randomNumberOrigin', [/* parameter description */
					[/* text */ 't', `the origin (inclusive) of each random value`]
				]],
				[/* parameter */ 'randomNumberBound', [/* parameter description */
					[/* text */ 't', `the bound (exclusive) of each random value`]
				]]
			],
			[/* throws */
				[/* throw */ 'java.lang.IllegalArgumentException', [/* throw description */
					[/* text */ 't', `if `],
					[/* inline code block */ 'i', `streamSize`],
					[/* text */ 't', ` is
         less than zero, or `],
					[/* inline code block */ 'i', `randomNumberOrigin`],
					[/* text */ 't', `
         is greater than or equal to `],
					[/* inline code block */ 'i', `randomNumberBound`]
				]]
			],
			[/* return description */
				[/* text */ 't', `a stream of pseudorandom `],
				[/* inline code block */ 'i', `double`],
				[/* text */ 't', ` values,
         each with the given origin (inclusive) and bound (exclusive)`]
			]
		]],
		[/* method */ 'ints()', [
			[/* method description */
				[/* text */ 't', `Returns an effectively unlimited stream of pseudorandom `],
				[/* inline code block */ 'i', `int`],
				[/* text */ 't', `
 values from this generator and/or one split from it.`]
			],
			/* parameters */,
			/* throws */,
			[/* return description */
				[/* text */ 't', `a stream of pseudorandom `],
				[/* inline code block */ 'i', `int`],
				[/* text */ 't', ` values`]
			]
		]],
		[/* method */ 'ints(int,int)', [
			[/* method description */
				[/* text */ 't', `Returns an effectively unlimited stream of pseudorandom `],
				[/* inline code block */ 'i', `int`],
				[/* text */ 't', ` values from this generator and/or one split from it; each value
 conforms to the given origin (inclusive) and bound (exclusive).`]
			],
			[/* parameters */
				[/* parameter */ 'randomNumberOrigin', [/* parameter description */
					[/* text */ 't', `the origin (inclusive) of each random value`]
				]],
				[/* parameter */ 'randomNumberBound', [/* parameter description */
					[/* text */ 't', `the bound (exclusive) of each random value`]
				]]
			],
			[/* throws */
				[/* throw */ 'java.lang.IllegalArgumentException', [/* throw description */
					[/* text */ 't', `if `],
					[/* inline code block */ 'i', `randomNumberOrigin`],
					[/* text */ 't', `
         is greater than or equal to `],
					[/* inline code block */ 'i', `randomNumberBound`]
				]]
			],
			[/* return description */
				[/* text */ 't', `a stream of pseudorandom `],
				[/* inline code block */ 'i', `int`],
				[/* text */ 't', ` values,
         each with the given origin (inclusive) and bound (exclusive)`]
			]
		]],
		[/* method */ 'ints(long)', [
			[/* method description */
				[/* text */ 't', `Returns a stream producing the given `],
				[/* inline code block */ 'i', `streamSize`],
				[/* text */ 't', ` number
 of pseudorandom `],
				[/* inline code block */ 'i', `int`],
				[/* text */ 't', ` values from this generator and/or
 one split from it.`]
			],
			[/* parameters */
				[/* parameter */ 'streamSize', [/* parameter description */
					[/* text */ 't', `the number of values to generate`]
				]]
			],
			[/* throws */
				[/* throw */ 'java.lang.IllegalArgumentException', [/* throw description */
					[/* text */ 't', `if `],
					[/* inline code block */ 'i', `streamSize`],
					[/* text */ 't', ` is
         less than zero`]
				]]
			],
			[/* return description */
				[/* text */ 't', `a stream of pseudorandom `],
				[/* inline code block */ 'i', `int`],
				[/* text */ 't', ` values`]
			]
		]],
		[/* method */ 'ints(long,int,int)', [
			[/* method description */
				[/* text */ 't', `Returns a stream producing the given `],
				[/* inline code block */ 'i', `streamSize`],
				[/* text */ 't', ` number
 of pseudorandom `],
				[/* inline code block */ 'i', `int`],
				[/* text */ 't', ` values from this generator and/or one split
 from it; each value conforms to the given origin (inclusive) and bound
 (exclusive).`]
			],
			[/* parameters */
				[/* parameter */ 'streamSize', [/* parameter description */
					[/* text */ 't', `the number of values to generate`]
				]],
				[/* parameter */ 'randomNumberOrigin', [/* parameter description */
					[/* text */ 't', `the origin (inclusive) of each random value`]
				]],
				[/* parameter */ 'randomNumberBound', [/* parameter description */
					[/* text */ 't', `the bound (exclusive) of each random value`]
				]]
			],
			[/* throws */
				[/* throw */ 'java.lang.IllegalArgumentException', [/* throw description */
					[/* text */ 't', `if `],
					[/* inline code block */ 'i', `streamSize`],
					[/* text */ 't', ` is
         less than zero, or `],
					[/* inline code block */ 'i', `randomNumberOrigin`],
					[/* text */ 't', `
         is greater than or equal to `],
					[/* inline code block */ 'i', `randomNumberBound`]
				]]
			],
			[/* return description */
				[/* text */ 't', `a stream of pseudorandom `],
				[/* inline code block */ 'i', `int`],
				[/* text */ 't', ` values,
         each with the given origin (inclusive) and bound (exclusive)`]
			]
		]],
		[/* method */ 'longs()', [
			[/* method description */
				[/* text */ 't', `Returns an effectively unlimited stream of pseudorandom `],
				[/* inline code block */ 'i', `long`],
				[/* text */ 't', ` values from this generator and/or one split from it.`]
			],
			/* parameters */,
			/* throws */,
			[/* return description */
				[/* text */ 't', `a stream of pseudorandom `],
				[/* inline code block */ 'i', `long`],
				[/* text */ 't', ` values`]
			]
		]],
		[/* method */ 'longs(long)', [
			[/* method description */
				[/* text */ 't', `Returns a stream producing the given `],
				[/* inline code block */ 'i', `streamSize`],
				[/* text */ 't', ` number
 of pseudorandom `],
				[/* inline code block */ 'i', `long`],
				[/* text */ 't', ` values from this generator and/or
 one split from it.`]
			],
			[/* parameters */
				[/* parameter */ 'streamSize', [/* parameter description */
					[/* text */ 't', `the number of values to generate`]
				]]
			],
			[/* throws */
				[/* throw */ 'java.lang.IllegalArgumentException', [/* throw description */
					[/* text */ 't', `if `],
					[/* inline code block */ 'i', `streamSize`],
					[/* text */ 't', ` is
         less than zero`]
				]]
			],
			[/* return description */
				[/* text */ 't', `a stream of pseudorandom `],
				[/* inline code block */ 'i', `long`],
				[/* text */ 't', ` values`]
			]
		]],
		[/* method */ 'longs(long,long)', [
			[/* method description */
				[/* text */ 't', `Returns an effectively unlimited stream of pseudorandom `],
				[/* inline code block */ 'i', `long`],
				[/* text */ 't', ` values from this generator and/or one split from it; each value
 conforms to the given origin (inclusive) and bound (exclusive).`]
			],
			[/* parameters */
				[/* parameter */ 'randomNumberOrigin', [/* parameter description */
					[/* text */ 't', `the origin (inclusive) of each random value`]
				]],
				[/* parameter */ 'randomNumberBound', [/* parameter description */
					[/* text */ 't', `the bound (exclusive) of each random value`]
				]]
			],
			[/* throws */
				[/* throw */ 'java.lang.IllegalArgumentException', [/* throw description */
					[/* text */ 't', `if `],
					[/* inline code block */ 'i', `randomNumberOrigin`],
					[/* text */ 't', `
         is greater than or equal to `],
					[/* inline code block */ 'i', `randomNumberBound`]
				]]
			],
			[/* return description */
				[/* text */ 't', `a stream of pseudorandom `],
				[/* inline code block */ 'i', `long`],
				[/* text */ 't', ` values,
         each with the given origin (inclusive) and bound (exclusive)`]
			]
		]],
		[/* method */ 'longs(long,long,long)', [
			[/* method description */
				[/* text */ 't', `Returns a stream producing the given `],
				[/* inline code block */ 'i', `streamSize`],
				[/* text */ 't', ` number of
 pseudorandom `],
				[/* inline code block */ 'i', `long`],
				[/* text */ 't', ` values from this generator and/or one split
 from it; each value conforms to the given origin (inclusive) and bound
 (exclusive).`]
			],
			[/* parameters */
				[/* parameter */ 'streamSize', [/* parameter description */
					[/* text */ 't', `the number of values to generate`]
				]],
				[/* parameter */ 'randomNumberOrigin', [/* parameter description */
					[/* text */ 't', `the origin (inclusive) of each random value`]
				]],
				[/* parameter */ 'randomNumberBound', [/* parameter description */
					[/* text */ 't', `the bound (exclusive) of each random value`]
				]]
			],
			[/* throws */
				[/* throw */ 'java.lang.IllegalArgumentException', [/* throw description */
					[/* text */ 't', `if `],
					[/* inline code block */ 'i', `streamSize`],
					[/* text */ 't', ` is
         less than zero, or `],
					[/* inline code block */ 'i', `randomNumberOrigin`],
					[/* text */ 't', `
         is greater than or equal to `],
					[/* inline code block */ 'i', `randomNumberBound`]
				]]
			],
			[/* return description */
				[/* text */ 't', `a stream of pseudorandom `],
				[/* inline code block */ 'i', `long`],
				[/* text */ 't', ` values,
         each with the given origin (inclusive) and bound (exclusive)`]
			]
		]],
		[/* method */ 'splits()', [
			[/* method description */
				[/* text */ 't', `Returns an effectively unlimited stream of new pseudorandom number
 generators, each of which implements the `],
				[/* reference */ 'r', `java.util.random.RandomGenerator.SplittableGenerator`, `RandomGenerator.SplittableGenerator`],
				[/* text */ 't', `
 interface.

 `],
				[/* block */ 'b', ` This pseudorandom number generator may be used as a source of
 pseudorandom bits used to initialize the state the new ones.`]
			],
			/* parameters */,
			/* throws */,
			[/* return description */
				[/* text */ 't', `a stream of `],
				[/* reference */ 'r', `java.util.random.RandomGenerator.SplittableGenerator`, `RandomGenerator.SplittableGenerator`],
				[/* text */ 't', ` objects`]
			]
		]],
		[/* method */ 'splits(java.util.random.RandomGenerator.SplittableGenerator)', [
			[/* method description */
				[/* text */ 't', `Returns an effectively unlimited stream of new pseudorandom number
 generators, each of which implements the `],
				[/* reference */ 'r', `java.util.random.RandomGenerator.SplittableGenerator`, `RandomGenerator.SplittableGenerator`],
				[/* text */ 't', `
 interface.`]
			],
			[/* parameters */
				[/* parameter */ 'source', [/* parameter description */
					[/* text */ 't', `a `],
					[/* reference */ 'r', `java.util.random.RandomGenerator.SplittableGenerator`, `RandomGenerator.SplittableGenerator`],
					[/* text */ 't', ` instance to be used instead
               of this one as a source of pseudorandom bits used to
               initialize the state of the new ones.`]
				]]
			],
			[/* throws */
				[/* throw */ 'java.lang.NullPointerException', [/* throw description */
					[/* text */ 't', `if source is null`]
				]]
			],
			[/* return description */
				[/* text */ 't', `a stream of `],
				[/* reference */ 'r', `java.util.random.RandomGenerator.SplittableGenerator`, `RandomGenerator.SplittableGenerator`],
				[/* text */ 't', ` objects`]
			]
		]],
		[/* method */ 'splits(long)', [
			[/* method description */
				[/* text */ 't', `Returns a stream producing the given `],
				[/* inline code block */ 'i', `streamSize`],
				[/* text */ 't', ` number of new
 pseudorandom number generators, each of which implements the
 `],
				[/* reference */ 'r', `java.util.random.RandomGenerator.SplittableGenerator`, `RandomGenerator.SplittableGenerator`],
				[/* text */ 't', ` interface.

 `],
				[/* block */ 'b', ` This pseudorandom number generator may be used as a source of
 pseudorandom bits used to initialize the state the new ones.`]
			],
			[/* parameters */
				[/* parameter */ 'streamSize', [/* parameter description */
					[/* text */ 't', `the number of values to generate`]
				]]
			],
			[/* throws */
				[/* throw */ 'java.lang.IllegalArgumentException', [/* throw description */
					[/* text */ 't', `if `],
					[/* inline code block */ 'i', `streamSize`],
					[/* text */ 't', ` is
         less than zero`]
				]]
			],
			[/* return description */
				[/* text */ 't', `a stream of `],
				[/* reference */ 'r', `java.util.random.RandomGenerator.SplittableGenerator`, `RandomGenerator.SplittableGenerator`],
				[/* text */ 't', ` objects`]
			]
		]],
		[/* method */ 'splits(long,java.util.random.RandomGenerator.SplittableGenerator)', [
			[/* method description */
				[/* text */ 't', `Returns a stream producing the given `],
				[/* inline code block */ 'i', `streamSize`],
				[/* text */ 't', ` number of new
 pseudorandom number generators, each of which implements the
 `],
				[/* reference */ 'r', `java.util.random.RandomGenerator.SplittableGenerator`, `RandomGenerator.SplittableGenerator`],
				[/* text */ 't', ` interface.`]
			],
			[/* parameters */
				[/* parameter */ 'streamSize', [/* parameter description */
					[/* text */ 't', `the number of values to generate`]
				]],
				[/* parameter */ 'source', [/* parameter description */
					[/* text */ 't', `a `],
					[/* reference */ 'r', `java.util.random.RandomGenerator.SplittableGenerator`, `RandomGenerator.SplittableGenerator`],
					[/* text */ 't', ` instance to be used instead
               of this one as a source of pseudorandom bits used to
               initialize the state of the new ones.`]
				]]
			],
			[/* throws */
				[/* throw */ 'java.lang.NullPointerException', [/* throw description */
					[/* text */ 't', `if source is null`]
				]],
				[/* throw */ 'java.lang.IllegalArgumentException', [/* throw description */
					[/* text */ 't', `if `],
					[/* inline code block */ 'i', `streamSize`],
					[/* text */ 't', ` is
         less than zero`]
				]]
			],
			[/* return description */
				[/* text */ 't', `a stream of `],
				[/* reference */ 'r', `java.util.random.RandomGenerator.SplittableGenerator`, `RandomGenerator.SplittableGenerator`],
				[/* text */ 't', ` objects`]
			]
		]],
		[/* method */ 'nextLong()', [
			[/* method description */
				[/* block */ 'b', [
					[/* text */ 't', `Returns a pseudorandomly chosen `],
					[/* inline code block */ 'i', `long`],
					[/* text */ 't', ` value.`]
				]]
			],
			/* parameters */,
			/* throws */,
			[/* return description */
				[/* text */ 't', `a pseudorandomly chosen `],
				[/* inline code block */ 'i', `long`],
				[/* text */ 't', ` value`]
			]
		]],
		[/* method */ 'nextBytes(byte[])', [
			[/* method description */
				[/* text */ 't', `Fills a user-supplied byte array with generated byte values
 pseudorandomly chosen uniformly from the range of values between -128
 (inclusive) and 127 (inclusive).`]
			],
			[/* parameters */
				[/* parameter */ 'bytes', [/* parameter description */
					[/* text */ 't', `the byte array to fill with pseudorandom bytes`]
				]]
			],
			[/* throws */
				[/* throw */ 'java.lang.NullPointerException', [/* throw description */
					[/* text */ 't', `if bytes is null`]
				]]
			],
			/* return */ UDF
		]]
	],
	/* enum values */ UDF
]);
