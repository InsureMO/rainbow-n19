// eslint-disable-next-line @typescript-eslint/no-unused-vars
const symbolTokens = [
	'StringLiteral',
	'GStringBegin',
	'GStringEnd',
	'GStringPart',
	'GStringPathPart',
	'RollBackOne',
	'AS',
	'DEF',
	'IN',
	'TRAIT',
	'THREADSAFE',
	'VAR',
	'BuiltInPrimitiveType',
	'ABSTRACT',
	'ASSERT',
	'BREAK',
	'YIELD',
	'CASE',
	'CATCH',
	'CLASS',
	'CONST',
	'CONTINUE',
	'DEFAULT',
	'DO',
	'ELSE',
	'ENUM',
	'EXTENDS',
	'FINAL',
	'FINALLY',
	'FOR',
	'IF',
	'GOTO',
	'IMPLEMENTS',
	'IMPORT',
	'INSTANCEOF',
	'INTERFACE',
	'NATIVE',
	'NEW',
	'NON_SEALED',
	'PACKAGE',
	'PERMITS',
	'PRIVATE',
	'PROTECTED',
	'PUBLIC',
	'RECORD',
	'RETURN',
	'SEALED',
	'STATIC',
	'STRICTFP',
	'SUPER',
	'SWITCH',
	'SYNCHRONIZED',
	'THIS',
	'THROW',
	'THROWS',
	'TRANSIENT',
	'TRY',
	'VOID',
	'VOLATILE',
	'WHILE',
	'IntegerLiteral',
	'FloatingPointLiteral',
	'BooleanLiteral',
	'NullLiteral',
	'RANGE_INCLUSIVE',
	'RANGE_EXCLUSIVE_LEFT',
	'RANGE_EXCLUSIVE_RIGHT',
	'RANGE_EXCLUSIVE_FULL',
	'SPREAD_DOT',
	'SAFE_DOT',
	'SAFE_INDEX',
	'SAFE_CHAIN_DOT',
	'ELVIS',
	'METHOD_POINTER',
	'METHOD_REFERENCE',
	'REGEX_FIND',
	'REGEX_MATCH',
	'POWER',
	'POWER_ASSIGN',
	'SPACESHIP',
	'IDENTICAL',
	'NOT_IDENTICAL',
	'ARROW',
	'NOT_INSTANCEOF',
	'NOT_IN',
	'LPAREN',
	'RPAREN',
	'LBRACE',
	'RBRACE',
	'LBRACK',
	'RBRACK',
	'SEMI',
	'COMMA',
	'DOT',
	'ASSIGN',
	'GT',
	'LT',
	'NOT',
	'BITNOT',
	'QUESTION',
	'COLON',
	'EQUAL',
	'LE',
	'GE',
	'NOTEQUAL',
	'AND',
	'OR',
	'INC',
	'DEC',
	'ADD',
	'SUB',
	'MUL',
	'DIV',
	'BITAND',
	'BITOR',
	'XOR',
	'MOD',
	'ADD_ASSIGN',
	'SUB_ASSIGN',
	'MUL_ASSIGN',
	'DIV_ASSIGN',
	'AND_ASSIGN',
	'OR_ASSIGN',
	'XOR_ASSIGN',
	'MOD_ASSIGN',
	'LSHIFT_ASSIGN',
	'RSHIFT_ASSIGN',
	'URSHIFT_ASSIGN',
	'ELVIS_ASSIGN',
	'CapitalizedIdentifier',
	'Identifier',
	'AT',
	'ELLIPSIS',
	'WS',
	'NL',
	'SH_COMMENT',
	'UNEXPECTED_CHAR'
] as const;
export type SymbolToken = (typeof symbolTokens)[number];

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const additionalTokens = [
	'AT_for_class_declaration',
	'AT_for_annotation',
	'CapitalizedIdentifier_for_annotation',
	'Identifier_for_annotation',
	'ARROW_for_closure',
	'LBRACE_for_closure',
	'RBRACE_for_closure',
	'NL_for_sl_comment',
	'NL_for_ml_comment',
	'NL_for_sl_comment_todo',
	'NL_for_ml_comment_todo'
] as const;
export type AdditionalToken = (typeof additionalTokens)[number]
